#!/usr/local/bin/python

import sys
import Tkinter
import os

sys.path.append('..')

from scato.ui.examples import examples
from scato.language import Context, StatementProg, TokenSequence
from scato.draw_area import DrawArea

def untree(tr):
    r = []
    for tit, v in tr:
        if hasattr(v, 'upper'):
            r.append([tit, v + '\n'])
        else:
            r.extend(untree(v))
    return r

ex_learn, ex_demo = map(lambda x: untree(x[1]), examples)

tk = Tkinter.Tk()
da = DrawArea(tk, 40)
tk.update()
ct = Context(da)
for ex, sfx, size, marg, tile, in ((ex_learn, 'l', 60, 1, 10), (ex_demo, 'd', 120, 2, 5)):
    n = 0
    sh = ''
    for tit, text in ex:
        n += 1
        print n, tit
        pr = StatementProg(TokenSequence(text))
        ct.drop_state(pr)
        while not ct.prog is None:
            ct.prog(ct)
        tk.update()
	f = 'fig_%02d_%s' % (n, sfx)
        da.export_postscript('%s.ps' % f)
	os.system('gs -dBATCH -dSAFER -dNOPAUSE -dEPSCrop '
	          '-r100 -q -sDEVICE=png16m -sOutputFile=%s-b.png '
		  '%s.ps' % (f, f))
	os.system('convert -resize %dx%d %s-b.png %s.png' % (size, size, f, f))
	sh += ' %s.png' % f
    os.system('montage %s -geometry +%d+%d -tile %dx -background none fig_res_%s.png' % (
               sh, marg, marg, tile, sfx))
	

# for i in fig_??.ps; do gs -dBATCH -dSAFER -dNOPAUSE -dEPSCrop -r100 -q -sDEVICE=png16m -sOutputFile=xxx.png $i ; convert -resize 80x80 xxx.png ${i%ps}png; done
# montage fig_??.png -geometry +1+1 -background none xxx.png
